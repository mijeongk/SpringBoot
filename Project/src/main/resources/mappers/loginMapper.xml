<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
  <!-- namespace는 반드시 DAO인터페이스와 이름이 일치해야 한다. -->
<mapper namespace="kr.couple.web.dao.MemberDAO">
	<!-- 매퍼파일에 태그 1개당 DAO인터페이스의 메서드 1개를 만든다. -->
	<!-- SQL명령 1개당 태그 1개씩을 추가한다. -->

	<!-- 1. 전체 개수 얻기 -->
	<select id="selectCount" resultType="int">
		select count(*) from users
	</select>

	<!-- 2. 지정 아이디의 개수 얻기 : 아이디 중복 확인 처리 -->
	<select id="selectByUserIdCount" parameterType="string" resultType="int">
		select count(*) from users where shared_id=#{shared_id}
	</select>
	
	<!-- 3. 1개 가져오기 :로그인/정수수정/회원탈퇴 ... -->
	<select id="selectByUserId" parameterType="string" resultType="UsersVO">
		select * from users where shared_id=#{shared_id}
	</select>
	
	<select id="selectById" parameterType="int" resultType="UsersVO">
		select * from users where shared_id=#{shared_id}
	</select>
	

	<!-- 이메일로 찾기 -->
	<select id="selectByEmail" parameterType="string" resultType="UsersVO">
		select * from users where email=#{email}
	</select>
	
	<!-- 4. 전체가져오기 : 관리자가 회원 목록보기(나중에 조건별, 페이징 처리) -->
	<select id="selectByList" resultType="UsersVO">
		select * from users order by id desc
	</select>
	<!-- 5. 저장 -->
	<insert id="insert1" parameterType="UsersVO">
		INSERT INTO USERS VALUES 
		(users_id_seq.nextval,#{shared_id1},#{shared_password1},#{user_name1},
		  #{email1},#{birth1})
	</insert>
	<insert id="insert2" parameterType="UsersVO">
		INSERT INTO USERS VALUES 
		(users_id_seq.nextval,#{shared_id2},#{shared_password2},#{user_name2},
		  #{email2},#{birth2})
	</insert>
	<!-- 6. 수정 -->
	<update id="update1"  parameterType="UsersVO">
		update 
			users
		set
			user_name1 = #{user_name1}, 
			email1=#{email1},
			birth1=#{birth1}
		where
			shared_id1=#{shared_id1}
	</update>
	<update id="update2"  parameterType="UsersVO">
		update 
			users
		set
			user_name2 = #{user_name2},
			email2=#{email2}, 
			birth2=#{birth2}
		where
			shared_id2=#{shared_id2}
	</update>
	<!-- 7. 삭제 -->
	<delete id="delete1" parameterType="int">
		delete from users where shared_id1=#{shared_id1}
	</delete>
	<delete id="delete2" parameterType="int">
		delete from users where shared_id2=#{shared_id2}
	</delete>
	
	<!-- 8. 임시 비번으로 고치기 -->
	<update id="updatePassword1" parameterType="hashmap">
		update member set password=#{password} where userid=#{userid}
	</update>
	
</mapper>